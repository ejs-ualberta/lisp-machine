Old Compiler Calling convention:
Caller pushes params left to right onto stack (without touching sp) and saves lr in the top position on the stack.
All gp registers callee saved.
Callee increments sp, saves fp and any registers it uses on its stack frame, then sets fp to point to its stack frame.
Do stuff.
Callee restores old fp and sp.
Caller pops everything (including callee's args) from the stack, and restores lr.

New Compiler Calling convention:
Caller increments sp to make room for params
Caller pushes params left to right onto stack and then also lr
All gp registers callee saved.
Callee saves fp and any registers it uses on its stack frame, then sets fp to point to its stack frame.
Do stuff.
Callee restores old sp and fp and returns a value in r1d.
Caller restores sp and lr.

Kernel Calling Convention:
Caller prepares args. If single arg pass it in r1d, otherwise pass pointer to array of args in r1d.
Caller increments sp by 1 and pushes lr. Note that if args are passed on the stack, sp may need to be incremented more.
Callee saves fp and any registers it uses on its stack frame, then sets fp to point to its stack frame.
Do stuff.
Callee restores old sp and fp and returns a value in r1d.
Caller restores sp and lr.
