|[zr r0]
|[sp r18]
|[fp r19]
|[bp r1a]
|[lr r1b]
|[ir r1c]
|[rr r1d]
|[pc r1e]
|[sr r1f]

|[word_sz-1 3F]
|[word_sz 40]
|[word_sz+1 41]

|[Object.max_sz 0]
|[Object.refcount 1]
|[Object.type 2]
|[Object.size 3]
|[Object.contents 4]

|[AVL_Node.prev 0]
|[AVL_Node.left 1]
|[AVL_Node.right 2]
|[AVL_Node.data 3]

|>[MBOX <>[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]

|>[#T ~>[[v1] [~>[[v2] [:v1]]]]]
|>[#F ~>[[v1] [~>[[v2] [:v2]]]]]

|>[# ~>[[str] [[]]]]

|>[call ~>[[func] [>[
	ads :lr :pc 2
	jnc :sr :bp :func]]]]
|>[callb ~>[[func] [>[
	ads :lr :pc 2
	jnc :sr :zr :func]]]]
|>[ret >[jnc :sr :lr 0]]
|>[return ~>[[retval] [>[
        ads :rr :zr :retval
	:ret
]]]]
|>[loop ~>[[lname reg n body][>[
	ads :reg :zr :n
	:lname :body
	ads :reg :reg -1
	jnc :reg :bp :lname
]]]]





|>[mbox_call <>[
	ads :sp :sp 3
	str :fp :sp -2
	ads :fp :sp -2
	str r1 :fp 1
	str r2 :fp 2

	ads r1 :zr :MBOX
	shf r1 r1 -3
	xor r2 r2 r2
	ads r2 r2 F
	nor r2 r2 r2
	and r1 r1 r2
	and r2 :rr F
	orr r1 r1 r2

	ads r2 :zr 7e01710

	ldr :rr r2 3
	and :rr :rr 80000000
	jnc :rr :pc -2

	ldr :rr r2 4
	shf :rr :rr 20
	shf :rr :rr -20
	orr :rr r1 :rr
	str :rr r2 4

	ldr :rr r2 3
	and :rr :rr 40000000
	jnc :rr :pc -2

	ldr :rr r2 0
	and :rr :rr ffffffff
	xor :rr r1 :rr
	jnc :rr :pc -6

	ldr :rr :zr :MBOX
	shf :rr :rr 20
	xor :rr :rr 80000000
	jnc :rr :pc 3
	ads :rr :rr 1
	jnc :sr :pc 2
	xor :rr :rr :rr

	ldr r2 :fp 2
	ldr r1 :fp 1
	ldr :fp :fp 0
	ads :sp :sp -3
	jnc :sr :lr 0
]]

|>[fb_init <>[
	ads :sp :sp 5
	str :fp :sp -4
	ads :fp :sp -4
	str r1 :fp 1
	str r2 :fp 2
	str r3 :fp 3
	str :bp :fp 4

	ads :bp :pc -7

	xor r3 r3 r3
	ads r1 :zr :MBOX
	ads r2 r3 8c
	str r2 r1 0
	ads r2 r3 8
	shf r2 r2 -20
	ads r2 r2 48003
	str r2 r1 1
	ldr r2 :rr 0
	shf r2 r2 -20
	ads r2 r2 8
	str r2 r1 2
	ads r2 r3 48004
	shf r2 r2 -20
	ldr r3 :rr 1
	orr r2 r2 r3
	str r2 r1 3
	xor r3 r3 r3
	ads r2 r3 8
	shf r2 r2 -20
	ads r2 r2 8
	str r2 r1 4
	ldr r2 :rr 0
	ldr r3 :rr 1
	shf r3 r3 -20
	orr r2 r2 r3
	str r2 r1 5
	xor r3 r3 r3
	ads r2 r3 8
	shf r2 r2 -20
	ads r2 r2 48009
	str r2 r1 6
	ads r2 r3 8
	str r2 r1 7
	ads r2 r3 48005
	shf r2 r2 -20
	str r2 r1 8
	ads r2 r3 4
	shf r2 r2 -20
	ads r2 r2 4
	str r2 r1 9
	ads r2 r3 48006
	shf r2 r2 -20
	ads r2 r2 20
	str r2 r1 a
	ads r2 r3 4
	shf r2 r2 -20
	ads r2 r2 4
	str r2 r1 b
	ads r2 r3 40001
	shf r2 r2 -20
	ads r2 r2 1
	str r2 r1 c
	ads r2 r3 8
	shf r2 r2 -20
	ads r2 r2 8
	str r2 r1 d
	ads r2 r3 1000
	str r2 r1 e
	ads r2 r3 4
	shf r2 r2 -20
	ads r2 r2 40008
	str r2 r1 f
	ads r2 r3 4
	str r2 r1 10
	str r3 r1 11

	ads r2 :rr 0
	xor :rr :rr :rr
	ads :rr :rr 8
	ads :sp :sp 1
	str :lr :sp 0
	ads :lr :pc 2
	jnc :sr :zr :mbox_call
	ldr :lr :sp 0
	ads :sp :sp -1
	jnc :rr :pc 2
	jnc :sr :bp fb_init_cleanup

	ldr r3 r1 a
	shf r3 r3 -20
	shf r3 r3 20
	xor r3 r3 20
	jnc r3 :bp fb_init_cleanup

	ldr r3 r1 e
	shf r3 r3 -20
	shf r3 r3 20
	jnc r3 :pc 2
	jnc :sr :bp fb_init_cleanup

	and r3 r3 3fffffff
	ads :rr r2 0
	ldr r2 :rr 6
	str r3 r2 0
	ldr r2 :rr 2
	ldr r3 r1 2
	shf r3 r3 20
	str r3 r2 0
	ldr r2 :rr 3
	ldr r3 r1 3
	shf r3 r3 20
	shf r3 r3 -20
	str r3 r2 0
	ldr r2 :rr 4
	ldr r3 r1 10
	shf r3 r3 20
	str r3 r2 0
	ldr r2 :rr 5
	ldr r3 r1 c
	shf r3 r3 -20
	shf r3 r3 20
	str r3 r2 0

	ldr :rr r1 e
	str :rr r1 e
	ads r1 :zr :MBOX

fb_init_cleanup
	ldr :bp :fp 4
	ldr r3 :fp 3
	ldr r2 :fp 2
	ldr r1 :fp 1
	ldr :fp :fp 0
	sbs :sp :sp 5
	jnc :sr :lr 0
]]

|>[uart_init <>[
	ads :sp :sp 3
	str :fp :sp -2
	ads :fp :sp -2
	str r1 :fp 1
	str r2 :fp 2

	xor :rr :rr :rr
	ads :rr :rr 7e40206
	ldr r1 :rr 0
	shf r1 r1 20
	shf r1 r1 -20
	str r1 :rr 0

	ads :rr :zr :MBOX
	xor r2 r2 r2
	ads r1 r2 24
	str r1 :rr 0
	ads r1 r2 c
	shf r1 r1 -20
	ads r1 r1 38002
	str r1 :rr 1
	ads r1 r2 2
	shf r1 r1 -20
	ads r1 r1 8
	str r1 :rr 2
	ads r1 r2 3d0900
	str r1 :rr 3
	str r2 :rr 4

	xor :rr :rr :rr
	ads :rr :rr 8
	ads :sp :sp 1
	str :lr :sp 0
	ads :lr :pc 2
	jnc :sr :zr :mbox_call
	ldr :lr :sp 0
	ads :sp :sp -1

	ads :rr r2 7e40000
	ldr r1 :rr 0
	ads r2 r2 3f000
	shf r2 r2 -20
	nor r2 r2 r2
	and r1 r1 r2
	xor r2 r2 r2
	ads r2 r2 24000
	shf r2 r2 -20
	orr r1 r1 r2
	str r1 :rr 0

	xor r1 r1 r1
	ads :rr r1 7e40012
	ldr r1 :rr 0
	shf r1 r1 -20
	shf r1 r1 20
	str r1 :rr 0

	xor :rr :rr :rr
	ads :rr :rr a0
	ads :rr :rr -1
	jnc :rr :pc -1

	ads r1 :rr 7e40013
	ldr :rr r1 0
	shf :rr :rr 20
	shf :rr :rr -20
	ads :rr :rr c000
	str :rr r1 0

	xor :rr :rr :rr
	ads :rr :rr a0
	ads :rr :rr -1
	jnc :rr :pc -1

	ldr :rr r1 0
	shf :rr :rr 20
	shf :rr :rr -20
	str :rr r1 0

	xor :rr :rr :rr
	ads :rr :rr 7e40208
	ldr r1 :rr 0
	shf r1 r1 -20
	shf r1 r1 20
	ads r1 r1 7ff00000000
	str r1 :rr 0

	xor :rr :rr :rr
	ads :rr :rr 7e40204
	ldr r1 :rr 0
	shf r1 r1 -20
	shf r1 r1 20
	ads r1 r1 200000000
	str r1 :rr 0

	xor :rr :rr :rr
	xor r1 r1 r1
	ads :rr :rr 7e40205
	ads r1 r1 70
	shf r1 r1 -20
	ads r1 r1 b
	str r1 :rr 0

	xor :rr :rr :rr
	ads :rr :rr 7e40206
	ldr r1 :rr 0
	shf r1 r1 20
	shf r1 r1 -20
	ads r1 r1 301
	str r1 :rr 0

	ldr r2 :fp 2
	ldr r1 :fp 1
	ldr :fp :fp 0
	sbs :sp :sp 3
	jnc :sr :lr 0
]]

|>[uart_send <>[
	ads r18 r18 3
	str r19 r18 -2
	ads r19 r18 -2
	str r1 r19 1
	str r2 r19 2

	xor r1 r1 r1
	ads r1 r1 7e40203
	ldr r2 r1 0
	and r2 r2 20
	jnc r2 r1e -2

	str r1d r1 -3

	ldr r2 r19 2
	ldr r1 r19 1
	ldr r19 r19 0
	sbs r18 r18 3
	jnc r1F r1b 0
]]

|>[uart_getc <>[
	ads :sp :sp 3
	str :fp :sp -2
	ads :fp :sp -2
	str r1 :fp 1
	str r2 :fp 2

	xor r1 r1 r1
	ads r1 r1 7e40203
	ldr r2 r1 0
	and r2 r2 10
	jnc r2 :pc -2
 
	ldr :rr r1 -3
	and :rr :rr FFFFFFFF
	xor r2 :rr d
	jnc r2 :pc 2
	sbs :rr :rr 3

	ldr r2 :fp 2
	ldr r1 :fp 1
	ldr :fp :fp 0
	sbs :sp :sp 3
	jnc :sr :lr 0
]]

|>[uart_puts <>[
	ads :sp :sp 5
	str :fp :sp -4
	ads :fp :sp -4
	str r1 :fp 1
	str r2 :fp 2
	str :lr :fp 3
	str :bp :fp 4
	ads :bp :pc -7

	ads r1 :rr 0
	ldr :rr r1 0
	jnc :rr :pc 2
	jnc :sr :bp uart_puts_cleanup
loop
	and :rr :rr FFFF
	xor r2 :rr a
	jnc r2 :bp not_newline
	ads :rr :rr 3
	:>[:callb :uart_send]
	ads :rr :zr a
not_newline

	:>[:callb :uart_send]

	ads r1 r1 1
	ldr :rr r1 0
	jnc :rr :bp loop

uart_puts_cleanup
	ldr :bp :fp 4
	ldr :lr :fp 3
	ldr r2 :fp 2
	ldr r1 :fp 1
	ldr :fp :fp 0
	sbs :sp :sp 5
	jnc :sr :lr 0
]]

|>[word_to_str <>[
	ads :sp :sp 9
	str :fp :sp -8
	ads :fp :sp -8
	str :lr :fp 1
	str r1 :fp 2
	str r2 :fp 3
	str r3 :fp 4
	str r4 :fp 5
	str r5 :fp 6
	str r6 :fp 7
	str :bp :fp 8
	ads :bp :pc -B

	ldr r1 :rr 0
	ldr r2 :rr 1

	shf r3 r2 1
	shf r3 r3 -1
	jnc r3 :pc 2
	jnc :sr :bp retn_fail

	ldr r3 :rr 2
	jnc r3 :bp non_zero
	ads r4 :zr 30
	str r4 r1 0
	str :zr r1 1
	ads :rr :zr 1
	jnc :sr :bp word_to_str_cleanup
non_zero

	ldr r4 :rr 3
	sbs r2 r4 1
	xor r5 r5 r5

loop_1
	sbs :rr r4 r5
	jnc :rr :pc 2
	jnc :sr :bp retn_fail

	dvu r3 r3 r4
	ads :rr :rr 30
	sbs r6 :rr 3A
	shf r6 r6 :word_sz-1
	jnc r6 :bp cond_end
	ads :rr :rr 7
	sbs r6 :rr 5B
	shf r6 r6 :word_sz-1
	jnc r6 :bp cond_end
	ads :rr :rr 6
cond_end
	str :rr r1 r5
	ads r5 r5 1
	jnc r3 :bp loop_1

	ads :rr r5 0
	str :zr r1 r5
	sbs r5 r5 1
	xor r2 r2 r2

loop_2
	ldr r3 r1 r2
	ldr r4 r1 r5
	str r3 r1 r5
	str r4 r1 r2
	sbs r5 r5 1
	ads r2 r2 1
	sbs r3 r2 r5
	shf r3 r3 :word_sz-1
	jnc r3 :bp loop_2

	jnc :sr :bp word_to_str_cleanup

retn_fail
	sbs :rr :zr 1
word_to_str_cleanup
	ldr :bp :fp 8
	ldr r6 :fp 7
	ldr r5 :fp 6
	ldr r4 :fp 5
	ldr r3 :fp 4
	ldr r2 :fp 3
	ldr r1 :fp 2
	ldr :lr :fp 1
	ldr :fp :fp 0
	sbs :sp :sp 9
	:ret
]]

|>[uart_print_uint <>[
	ads :sp :sp 6
	str :fp :sp -5
	ads :fp :sp -5
	str r1 :fp 1
	str r2 :fp 2
	str r3 :fp 3
	str :bp :fp 4
	ads :bp :pc -7
	str :lr :fp 5

	ldr r1 :rr 0
	ldr r2 :rr 1
	ads r3 :sp 1
	ads :rr :zr :word_sz+1
	ads :sp :sp :rr
	ads :sp :sp 4
	str r2 :sp 0
	str r1 :sp -1
	str :rr :sp -2
	str r3 :sp -3
	sbs :rr :sp 3
	:>[:callb :word_to_str]

	sbs r1 :zr 1
loop_1
	ads r1 r1 1
	ldr :rr r3 r1
	ads r2 :rr 0
	:>[:callb :uart_send]
	sbs :rr r1 :word_sz+1
	shf :rr :rr :word_sz-1
	jnc :rr :pc 2
	jnc :sr :pc 2
	jnc r2 :bp loop_1

	sbs :sp :sp :word_sz+1
	sbs :sp :sp 4

	ldr :lr :fp 5
	ldr :bp :fp 4
	ldr r3 :fp 3
	ldr r2 :fp 2
	ldr r1 :fp 1
	ldr :fp :fp 0
	sbs :sp :sp 6
	:ret
]]

|>[pword <>[
	ads :sp :sp 3
	str :lr :sp -2

	str :rr :sp -1
	ads :rr :zr 10
	str :rr :sp 0
	ads :rr :sp -1
	:>[:callb :uart_print_uint]

	ldr :lr :sp -2
	sbs :sp :sp 3
	:ret
]]





|>[get_parent <>[
	jnc :rr :pc 2
	:ret

	ldr :rr :rr :AVL_Node.prev
	shf :rr :rr 3
	:ret
]]

|>[get_balance_factor <>[
	jnc :rr :pc 3
	ads :rr :rr 3
	:ret

	ldr :rr :rr 0
	and :rr :rr 3
	:ret
]]

|>[balance_factor <>[
	jnc :rr :pc 2
	:ret

	ads :sp :sp 1
	str :lr :sp 0
	:>[:callb :get_balance_factor]
	ldr :lr :sp 0
	ads :sp :sp -1

	sbs :rr :rr 1
	jnc :rr :pc 3
	ads :rr :rr 1
	:ret
	sbs :rr :rr 2
	:ret
]]

|>[rev_balance_factor <>[
	jnc :rr :pc 3
	ads :rr :rr 3
	:ret
	ads :rr :rr 1
	jnc :rr :pc 3
	ads :rr :zr 2
	:ret
	ads :rr :zr 1
	:ret
]]

|>[set_balance_factor <>[
	ads :sp :sp 3
	str :fp :sp -2
	ads :fp :sp -2
	str r1 :fp 1
	str r2 :fp 2

	ldr r1 :rr 0
	ldr r2 r1 :AVL_Node.prev
	ldr :rr :rr 1
	shf r2 r2 3
	shf r2 r2 -3
	:>[:callb :rev_balance_factor]
	orr :rr r2 :rr
	str :rr r1 :AVL_Node.prev

	ldr r2 :fp 2
	ldr r1 :fp 1
	ldr :fp :fp 0
	sbs :sp :sp 3
	jnc :sr :lr 0
]]

|>[_print_avl <>[
	:>[:#[
	      Do not call this function, call print_avl instead. r1 is the number of spaces to print,
	      r2 is the spaces string, r3 is the newline string, r4 is a temporary register, r5 is the
	      tree (which is passed to _print_avl in rr)
	]]
	jnc :rr :pc 2
	:ret
	ads :sp :sp 2
	str :lr :sp 0
	str r5 :sp -1

	ads r5 :rr 0
	jnc r1 :pc 2
	jnc :sr :bp spaces_end
	ads :rr r2 0
	ads r4 r1 0
spaces_loop
	sbs r4 r4 1
	ads :rr r2 0
	:>[:callb :uart_puts]
	jnc r4 :bp spaces_loop
spaces_end

	ldr :rr r5 :AVL_Node.prev
	and :rr :rr 3
	:>[:callb :pword]
	ads :rr r2 0
	:>[:callb :uart_puts]
	ldr :rr r5 :AVL_Node.data
	:>[:callb :pword]
	ads :rr r3 0
	:>[:callb :uart_puts]

	ads r1 r1 2
	ldr :rr r5 :AVL_Node.right
	:>[:callb :bp]
	sbs r1 r1 2

	ldr :rr r5 :AVL_Node.left
	:>[:callb :bp]

	ldr r5 :sp -1
	ldr :lr :sp 0
	sbs :sp :sp 2
	:ret
]]

|>[print_avl <>[
	:>[:#[
		Pass in the AVL tree to print in rr.
	]]
	ads :sp :sp 7
	str :fp :sp -6
	ads :fp :sp -6
	str r1 :fp 1
	str r2 :fp 2
	str r3 :fp 3
	str r4 :fp 4
	str :lr :fp 5
	str :bp :fp 6
	ads :bp :pc -9

	jnc :rr :bp non_zero
	:>[:callb :pword]
	ads :rr :bp newline
	:>[:callb :uart_puts]
	jnc :sr :bp print_avl_cleanup
non_zero

	xor r1 r1 r1
	ads r2 :bp space
	ads r3 :bp newline
	ads :bp :zr :_print_avl
	:>[:callb :_print_avl]

print_avl_cleanup
	ldr :bp :fp 6
	ldr :lr :fp 5
	ldr r4 :fp 4
	ldr r3 :fp 3
	ldr r2 :fp 2
	ldr r1 :fp 1
	ldr :fp :fp 0
	sbs :sp :sp 7
	:ret

space	20 0
newline A 0
]]

|>[avl_move <>[
	ads :sp :sp 6
	str :fp :sp -5
	ads :fp :sp -5
	str :lr :fp 1
	str r1 :fp 2
	str r2 :fp 3
	str r3 :fp 4
	str :bp :fp 5
	ads :bp :pc -8

	ldr r1 :rr 1
	ldr r2 :rr 2
	xor r3 r2 r1
	jnc r3 :pc 2
	jnc :sr :bp avl_move_cleanup

	ldr r3 :rr 0
	ldr :rr r3 0
	xor :rr :rr r2
	jnc :rr :pc 2
	str r1 r3 0

	ads :rr r2 0
	:>[:callb :get_parent]
	jnc :rr :pc 7
	ldr r3 :rr :AVL_Node.left
	xor r3 r3 r2
	jnc r3 :pc 3
	str r1 :rr :AVL_Node.left
	jnc :sr :pc 2
	str r1 :rr :AVL_Node.right

	ldr r3 r2 :AVL_Node.left
	jnc r3 :pc 2
	jnc :sr :bp ltest_end
	ads :rr r3 0
	:>[:callb :get_balance_factor]
	shf r1 r1 -3
	orr :rr :rr r1
	str :rr r3 :AVL_Node.prev
	shf r1 r1 3
ltest_end
	str r3 r1 :AVL_Node.left

	ldr r3 r2 :AVL_Node.right
	jnc r3 :pc 2
	jnc :sr :bp rtest_end
	ads :rr r3 0
	:>[:callb :get_balance_factor]
	shf r1 r1 -3
	orr :rr :rr r1
	str :rr r3 :AVL_Node.prev
	shf r1 r1 3
rtest_end
	str r3 r1 :AVL_Node.right

	ldr r3 r2 :AVL_Node.prev
	str r3 r1 :AVL_Node.prev
	ldr r3 r2 :AVL_Node.data
	str r3 r1 :AVL_Node.data

avl_move_cleanup
	ldr :bp :fp 5
	ldr r3 :fp 4
	ldr r2 :fp 3
	ldr r1 :fp 2
	ldr :lr :fp 1
	ldr :fp :fp 0
	sbs :sp :sp 6
	:ret
]]

|>[avl_find <>[
	ads :sp :sp 8
	str :fp :sp -7
	ads :fp :sp -7
	str :lr :fp 1
	str r1 :fp 2
	str r2 :fp 3
	str r3 :fp 4
	str :bp :fp 5
	ads :bp :pc -8

	ldr r1 :rr 0
	ldr r1 r1 0
	jnc r1 :pc 2
	jnc :sr :bp avl_find_cleanup

	ldr r2 :rr 1
	ldr r3 :rr 2
	ads :rr :bp NODE
	str r2 :rr :AVL_Node.data
	ads r2 :rr 0

avl_find_loop1
	ads :rr :sp -1
	str r1 :rr 0
	str r2 :rr 1
	:>[:callb r3]
	ads :rr :rr 1
	shf :rr :rr -2
	jnc :sr :pc :rr

option1
	ldr r1 r1 :AVL_Node.left
	jnc r1 :bp avl_find_loop1
	xor :rr :rr :rr
	jnc :sr :bp avl_find_cleanup

option2
	ads :rr r1 0
	jnc :sr :bp avl_find_cleanup
	0 0

option3
	ldr r1 r1 :AVL_Node.left
	jnc r1 :bp avl_find_loop1
	xor :rr :rr :rr

avl_find_cleanup
	ldr :bp :fp 5
	ldr r3 :fp 4
	ldr r2 :fp 3
	ldr r1 :fp 2
	ldr :lr :fp 1
	ldr :fp :fp 0
	sbs :sp :sp 8
	:ret

NODE 0 0 0 0
]]

|>[avl_min_ge <>[
	ads :sp :sp 6
	str :fp :sp -5
	ads :fp :sp -5
	str :lr :fp 1
	str r1 :fp 2
	str r2 :fp 3
	str r3 :fp 4
	str :bp :fp 5
	ads :bp :pc -8

	ldr r1 :rr 0
	jnc r1 :pc 3
	xor :rr :rr :rr
	jnc :sr :bp avl_min_ge_cleanup

	ldr r2 :rr 1
state_1
	ldr :rr r1 :AVL_Node.left
	jnc :rr :bp state_1
	ldr :rr r1 :AVL_Node.right
	jnc :rr :bp state_1
state_2
	ldr r3 r1 :AVL_Node.data
	sbs r3 r3 r2
	shf r3 r3 63
	jnc r3 :pc state_5
state_3
	ads :rr r1 0
	:>[:callb :get_parent]
	jnc :rr :pc 2
	jnc :sr :bp avl_min_ge_cleanup
	ldr r3 :rr :AVL_Node.left
	xor r3 r1 r3
	jnc r3 :bp state_4
	ldr r1 :rr :AVL_Node.right
	jnc r1 :bp state_1
state_4
	ads r1 :rr 0
	jnc :sr :bp state_2
state_5
	ads :rr r1 0

avl_min_ge_cleanup
	ldr :bp :fp 5
	ldr r3 :fp 4
	ldr r2 :fp 3
	ldr r1 :fp 2
	ldr :lr :fp 1
	ldr :fp :fp 0
	sbs :sp :sp 6
	:ret
]]

|>[avl_rotate_left <>[
	ads :sp :sp 7
	str :fp :sp -6
	ads :fp :sp -6
	str :lr :fp 1
	str r1 :fp 2
	str r2 :fp 3
	str r3 :fp 4
	str r4 :fp 5
	str :bp :fp 6
	ads :bp :pc -9

	ldr r1 :rr 0
	ldr r2 :rr 1
	jnc r2 :pc 2
	jnc :sr :bp retn_zero

	ldr r3 r2 :AVL_Node.right
	jnc r3 :pc 2
	jnc :sr :bp retn_zero

	ldr r4 r3 :AVL_Node.left
	jnc r4 :bp has_rl_child
	jnc :sr :bp hasnt_rl_child
has_rl_child
	ads :rr r4 0
	:>[:callb :get_balance_factor]
	orr :rr :rr r2
	str :rr r4 :AVL_Node.prev
hasnt_rl_child

	ads :rr r2 0
	:>[:callb :get_parent]
	jnc :rr :pc 2
	jnc :sr :bp hasnt_parent
	ldr r1 :rr :AVL_Node.left
	xor r1 r1 r2
	jnc r1 :pc 3
	str r3 :rr :AVL_Node.left
	jnc :sr :bp test_parent_end
	str r3 :rr :AVL_Node.right
	jnc :sr :bp test_parent_end
hasnt_parent
	str r3 r1 0
test_parent_end

	ads r1 :rr 0
	ads :rr r3 0
	:>[:callb :balance_factor]

	str r4 r2 :AVL_Node.right
	str r2 r3 :AVL_Node.left

	jnc :rr :bp old_rootbf_true
	ads :rr :zr 1
	:>[:callb :rev_balance_factor]
	shf r4 r3 -3
	orr :rr r4 :rr
	str :rr r2 :AVL_Node.prev
	sbs :rr :zr 1
	:>[:callb :rev_balance_factor]
	shf r4 r1 -3
	orr :rr r4 :rr
	str :rr r3 :AVL_Node.prev
	ads :rr r3 0
	jnc :sr :bp avl_rotate_left_cleanup
old_rootbf_true
	xor :rr :rr :rr
	:>[:callb :rev_balance_factor]
	shf r4 r3 -3
	orr r4 r4 :rr
	str r4 r2 :AVL_Node.prev
	shf r4 r1 -3
	orr r4 r4 :rr
	str r4 r3 :AVL_Node.prev

	ads :rr r3 0
	jnc :sr :bp avl_rotate_left_cleanup
retn_zero
	xor :rr :rr :rr
avl_rotate_left_cleanup
	ldr :bp :fp 6
	ldr r4 :fp 5
	ldr r3 :fp 4
	ldr r2 :fp 3
	ldr r1 :fp 2
	ldr :lr :fp 1
	ldr :fp :fp 0
	sbs :sp :sp 7
	:ret
]]

|>[avl_rotate_right <>[
	ads :sp :sp 7
	str :fp :sp -6
	ads :fp :sp -6
	str :lr :fp 1
	str r1 :fp 2
	str r2 :fp 3
	str r3 :fp 4
	str r4 :fp 5
	str :bp :fp 6
	ads :bp :pc -9

	ldr r1 :rr 0
	ldr r2 :rr 1
	jnc r2 :pc 2
	jnc :sr :bp retn_zero

	ldr r3 r2 :AVL_Node.left
	jnc r3 :pc 2
	jnc :sr :bp retn_zero

	ldr r4 r3 :AVL_Node.right
	jnc r4 :bp has_lr_child
	jnc :sr :bp hasnt_lr_child
has_lr_child
	ads :rr r4 0
	:>[:callb :get_balance_factor]
	shf r2 r2 -3
	orr :rr :rr r2
	str :rr r4 :AVL_Node.prev
	shf r2 r2 3
hasnt_lr_child

	ads :rr r2 0
	:>[:callb :get_parent]
	jnc :rr :pc 2
	jnc :sr :bp hasnt_parent
	ldr r1 :rr :AVL_Node.left
	xor r1 r1 r2
	jnc r1 :pc 3
	str r3 :rr :AVL_Node.left
	jnc :sr :bp test_parent_end
	str r3 :rr :AVL_Node.right
	jnc :sr :bp test_parent_end
hasnt_parent
	str r3 r1 0
test_parent_end

	ads r1 :rr 0
	ads :rr r3 0
	:>[:callb :balance_factor]

	str r4 r2 :AVL_Node.left
	str r2 r3 :AVL_Node.right

	jnc :rr :bp old_rootbf_true
	sbs :rr :zr 1
	:>[:callb :rev_balance_factor]
	shf r4 r3 -3
	orr :rr r4 :rr
	str :rr r2 :AVL_Node.prev
	ads :rr :zr 1
	:>[:callb :rev_balance_factor]
	shf r4 r1 -3
	orr :rr r4 :rr
	str :rr r3 :AVL_Node.prev
	ads :rr r3 0
	jnc :sr :bp avl_rotate_right_cleanup
old_rootbf_true
	xor :rr :rr :rr
	:>[:callb :rev_balance_factor]
	shf r4 r3 -3
	orr r4 r4 :rr
	str r4 r2 :AVL_Node.prev
	shf r4 r1 -3
	orr r4 r4 :rr
	str r4 r3 :AVL_Node.prev

	ads :rr r3 0
	jnc :sr :bp avl_rotate_right_cleanup
retn_zero
	xor :rr :rr :rr
avl_rotate_right_cleanup
	ldr :bp :fp 6
	ldr r4 :fp 5
	ldr r3 :fp 4
	ldr r2 :fp 3
	ldr r1 :fp 2
	ldr :lr :fp 1
	ldr :fp :fp 0
	sbs :sp :sp 7
	:ret
]]



|>[main <>[
	ads :bp :pc 0
	ads :sp :zr :STACK
	ads :fp :sp 0
	ads :lr :pc 2
	jnc :sr :bp MAIN
	xor :sr :sr :sr

exception_handler
	ads :sp :sp 2
	str :lr :sp 0
	str :rr :sp -1
	ldr :rr :sp -4
	ads :rr :rr 30
	ads :lr :pc 2
	jnc :sr :zr :uart_send
	ldr :rr :sp -1
	ldr :lr :sp 0
	ads :sp :sp -2
	exc -1

MAIN
	ads :ir :bp exception_handler
	ads r18 r18 1
	str r1b r18 0
	ads r1b r1e 2
	jnc r1f :zr :uart_init
	ldr r1b r18 0
	ads r18 r18 -1

	ads r1d r1a fb_width
	str r1d r1d 0
	ads r1d r1a fb_height
	str r1d r1d 0
	ads r1d r1a fb_pitch
	str r1d r1d 0
	ads r1d r1a fb_isrgb
	str r1d r1d 0
	ads r1d r1a fb_start
	str r1d r1d 0
	ads r1d r1a fb_init_args
	ads r18 r18 1
	str r1b r18 0
	ads r1b r1e 2
	jnc r1f :zr :fb_init

	ads r1 :bp avl_tree
	str r1 :bp tree
	ads r3 :bp args
	ads r4 :bp tree
	str r4 r3 0
	ads r4 :bp avl_tree
	str r4 r3 1
	shf r2 r1 -3
	orr r2 r2 1
	str r2 r1 4
	shf r2 r1 -3
	orr r2 r2 3
	str r2 r1 C
	orr r2 r2 3
	str r2 r1 8
	ads r2 r1 4
	str r2 r1 1
	ads r2 r1 C
	str r2 r1 2
	ads r2 r1 8
	str r2 r1 6
	ads :rr r1 0
	:>[:callb :print_avl]
	ads :rr :bp args
	:>[:callb :avl_rotate_right]
	ldr :rr :bp tree
	:>[:callb :print_avl]

	:>[:callb :uart_getc]
	:>[:callb :uart_send]
	ldr r1 :bp fb_start
	shf r1 r1 3
	ads r4 :zr 606000
	:>[:loop l2 r2 c0000 [
		 sbs r2 r2 1
		 str r4 r1 r2
		 ads r2 r2 1
	]]

	ads :rr :zr :self
	shf :rr :rr 3
	ldr :rr :rr :Object.contents

	ldr r1b r18 0
	ads r18 r18 -1
	jnc :sr :lr 0

fb_init_args	400
		300
fb_width	0
fb_height	0
fb_pitch	0
fb_isrgb	0
fb_start	0

args 		0 0
tree 		0
avl_tree 	2 0 0 deadbeef  0 0 0 c0debeef  0 0 0 cafebeef  0 0 0 c0decafe
]]

:>[:main]